//|||||||||||||||||||||||||||||||||||||||||||||||

#ifndef GAME_STATE_HPP
#define GAME_STATE_HPP

//|||||||||||||||||||||||||||||||||||||||||||||||

#include "AppState.hpp"
#include "SelectSystem.hpp"
#include "DotSceneLoader.hpp"
#include "FireFighter.hpp"
#include "Ground.hpp"
#include "Fire.hpp"
#include "Wall.hpp"
#include "FireFighterInputComponent.hpp"
#include "InputHandler.hpp"
<<<<<<< HEAD
#include "AdvancedCamera.hpp"
//#include "DebugOptions.hpp"

=======
#include "AdvancedCamera.hpp";
#include "ActionTurnHandler.hpp"
>>>>>>> release

#include <OgreSubEntity.h>
#include <OgreMaterialManager.h>

//|||||||||||||||||||||||||||||||||||||||||||||||

class GameState : public AppState
{
public:
	GameState();
	~GameState();

	DECLARE_APPSTATE_CLASS(GameState)

	void enter();
	void createScene();
	void exit();
	bool pause();
	void resume();

	//void moveCamera();
	void getInput();


	bool keyPressed(const OIS::KeyEvent &keyEventRef);
	bool keyReleased(const OIS::KeyEvent &keyEventRef);

	bool mouseMoved(const OIS::MouseEvent &arg);
	bool mousePressed(const OIS::MouseEvent &arg, OIS::MouseButtonID id);
	bool mouseReleased(const OIS::MouseEvent &arg, OIS::MouseButtonID id);

	//void onLeftPressed(const OIS::MouseEvent &evt);
    void itemSelected(OgreBites::SelectMenu* menu);
	void buttonHit(OgreBites::Button* button);

	void update(double timeSinceLastFrame);

	AdvancedCamera* gameCamera ;
	
	OgreBites::ParamsPanel*		m_pDetailsPanel;
	
	void buildGUI();
	void showDebugOptions();
	void hideDebugOptions();
	void debugUpdate();

private:
	Ogre::SceneNode*			m_pOgreHeadNode;
	Ogre::Entity*				m_pOgreHeadEntity;
	Ogre::MaterialPtr			m_pOgreHeadMat;
	Ogre::MaterialPtr			m_pOgreHeadMatHigh;


	bool						m_bQuit;

	/*Ogre::Vector3				m_TranslateVector;
	Ogre::Real					m_MoveSpeed;
	Ogre::Degree				m_RotateSpeed;
	float						m_MoveScale;
	Ogre::Degree				m_RotScale;*/

	Fire*						fireEntity;
	FireFighter*				fireFighterEntity;

	Ogre::RaySceneQuery*		m_pRSQ;
	Ogre::SceneNode*			m_pCurrentObject;
	bool						debugMode;
	bool						m_bLMouseDown, m_bRMouseDown;
	InputHandler*				inputHandler;

	ActionTurnHandler* pActionTurnHandler; 
	SelectSystem* m_characterSelect;
<<<<<<< HEAD
=======
	FireFactory* fireFactoryEntity; 

	
>>>>>>> release
	double timeSinceLastFrame;
};

//|||||||||||||||||||||||||||||||||||||||||||||||

#endif

//|||||||||||||||||||||||||||||||||||||||||||||||